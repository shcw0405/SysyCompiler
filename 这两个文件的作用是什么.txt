根据提供的演示文稿，这门编译原理课程设计的主要目标和任务如下：
核心任务：构建编译器
* 目标： 设计并实现一个能够将 SysY2022 语言（一种类C语言）的源代码编译成汇编指令（RISC-V 或 ARM 架构）的编译器。
* 团队合作： 以3-4人为一组进行开发。
* 编程语言限制： 可以使用 C、C++ 或 Java。
* 核心工具：
   * Flex: 用于词法分析。
   * Bison: 用于语法分析，并在其语义动作中完成中间代码生成，甚至可以直接生成目标代码。
* 学习重点： 课程特别强调通过实践加深对以下环节的理解：
   * 语义分析
   * 中间代码生成
   * 语法制导翻译
   * 符号表的应用
* 最终成果： 一个可以工作的编译器以及一份详细的实验报告。
* 考核方式： 在最后一节课进行白盒测试。
课程期望：
* 通过实际动手操作，学生能够更深入地理解编译过程的各个细节，尤其是理论课时可能未详细覆盖的语义分析、中间代码生成等部分。
* 不强求完成一个完美无缺的完整系统或进行复杂的优化，但希望学生能从中获得实质性的收获和理解。
附加任务（四选一，与AI相关）：
所有附加任务都要求在实验报告中详细记录相关过程，包括使用的prompt、交互记录（可省略部分代码，保留关键内容）以及最终成果。
1. AI辅助的代码生成：
   * 任务： 设计合适的prompt，利用一种生成式AI完成语义分析中一部分代码（以一个代码块为单位）的撰写。
   * 要求： 生成的代码需与项目其余部分的代码风格和注释风格保持一致，以保证可维护性。
2. AI辅助的代码修复：
   * 任务： 设计合适的prompt，利用一种生成式AI修复并改进一部分有缺陷或错误的代码（以一个代码块为单位）。
   * 目标： 使代码能够完成预期工作，并增强其可维护性。
3. AI辅助的可维护性增强：
   * 任务： 设计合适的prompt，利用一种生成式AI为一部分代码（不少于50行）撰写注释。
   * 目标： 增强代码的可读性，生成的注释风格需与项目其余部分保持一致。
4. AI2Code的适用性分析：
   * 任务： 任选一个语义分析中的代码块，尝试用至少3种大语言模型完成代码生成任务。
   * 评估： 对这些模型生成的代码质量（如正确性、可读性、生成效率等）进行点评和比较。
其他重要方面：
* 工程量： 演示文稿中提到，这可能是大学阶段工程量最大的课程设计之一，并以一个往届约11K行代码的项目为例，展示了各模块的代码量占比（中间代码生成占比最高，接近50%）。
* 建议：
   * 查阅并参考已有资料和文档（如北京大学SysY编译课程实践文档、RISC-V手册等）。
   * 学习和借鉴（但非抄袭）他人的实践经验。
* 开发规范： 强调注意代码风格、添加必要的注释、保持项目结构清晰，并使用良好的编程工具。
* SysY2022语言特性：
   * 类C语言，并列式结构。
   * 源文件扩展名为 .sy。
   * 有且仅有一个 main 主函数，可包含全局变量、常量声明和其他函数定义。
   * 支持 int 和 float 类型（均为32位），以及多维数组（按行优先存储）。
   * const 用于声明常量。
   * 支持 int 和 float 之间的隐式类型转换，但无显式强制类型转换。
* 准备工作： 可能需要 Docker 环境和 Git 版本控制工具。
词法分析与语法分析工具关系：
* Flex 进行词法分析，将源代码分解为词法单元 (token)。
* Bison 进行语法分析，根据定义的文法规则解析词法单元流，并构建抽象语法树 (AST)。语义动作（如类型检查、中间代码生成）通常在 Bison 的规则归约时执行。
总而言之，这项课程设计旨在让学生通过构建一个小型但完整的编译器，全面掌握编译器的核心原理和实现技术，并鼓励探索和利用AI工具辅助开发。